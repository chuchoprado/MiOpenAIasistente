from flask import Flask, request, jsonify
import gspread
import json
import os
import logging
from oauth2client.service_account import ServiceAccountCredentials

# ‚úÖ Inicializa Flask
app = Flask(__name__)
logging.basicConfig(level=logging.DEBUG)

# ‚úÖ Carga credenciales de Google Sheets desde variables de entorno
CREDENTIALS_JSON = os.getenv("GOOGLE_SHEETS_CREDENTIALS")

if CREDENTIALS_JSON:
    credentials_dict = json.loads(CREDENTIALS_JSON)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
else:
    raise ValueError("‚ùå ERROR: No se encontraron credenciales de Google Sheets en las variables de entorno.")

# ‚úÖ Funci√≥n para conectar a Google Sheets
def get_sheet():
    try:
        client = gspread.authorize(credentials)
        sheet = client.open("BBDD ElCoach").sheet1  # ‚úÖ Se actualiz√≥ el nombre correcto de la hoja
        return sheet
    except Exception as e:
        logging.error(f"‚ùå ERROR: No se pudo conectar con Google Sheets: {e}", exc_info=True)
        return None

# ‚úÖ Endpoint mejorado con b√∫squeda flexible
@app.route("/api/sheets", methods=["GET"])
def fetch_sheet_data():
    """
    Permite buscar recursos en Google Sheets usando categor√≠a, tag, o ambos.
    La b√∫squeda es insensible a may√∫sculas/min√∫sculas y al prefijo "#".
    """
    spreadsheet_id = request.args.get("spreadsheet_id")
    category = request.args.get("category")
    tag = request.args.get("tag")

    logging.debug(f"üîç Par√°metros recibidos - Spreadsheet ID: {spreadsheet_id}, Categor√≠a: {category}, Tag: {tag}")

    if not spreadsheet_id:
        return jsonify({"error": "‚ùå ERROR: Falta el par√°metro 'spreadsheet_id'"}), 400

    sheet = get_sheet()
    if sheet is None:
        return jsonify({"error": "‚ùå ERROR: No se pudo conectar con la hoja de c√°lculo"}), 500

    try:
        # ‚úÖ Normalizaci√≥n: eliminar espacios, convertir a min√∫sculas y eliminar #
        normalized_category = category.lower().strip() if category else None
        normalized_tag = tag.lower().strip().lstrip("#") if tag else None

        # ‚úÖ Obtiene todos los registros de la hoja
        rows = sheet.get_all_records()
        logging.info(f"‚úÖ Total de filas obtenidas: {len(rows)}")

        # ‚úÖ Filtrado flexible seg√∫n los par√°metros
        filtered_resources = [
            row for row in rows
            if (
                (not normalized_category or row.get("Category", "").strip().lower() == normalized_category) and
                (not normalized_tag or normalized_tag in row.get("Tag", "").strip().lower().replace("#", ""))
            )
        ]

        logging.info(f"‚úÖ Recursos encontrados: {len(filtered_resources)}")

        if not filtered_resources:
            return jsonify({"message": "‚ö†Ô∏è No se encontraron recursos que coincidan.", "data": []}), 200

        return jsonify({"data": filtered_resources}), 200

    except Exception as e:
        logging.error(f"‚ùå ERROR: Fallo al obtener datos de la hoja: {e}", exc_info=True)
        return jsonify({"error": "‚ùå ERROR: Ocurri√≥ un error en el servidor"}), 500

# ‚úÖ Ajuste para el puerto de Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))  # Usa el puerto de Render si est√° disponible
    app.run(host="0.0.0.0", port=port)
